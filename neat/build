#!/bin/bash
clear
echo Building UFABC Robotics RCSS
LOG_FILE=build_log.txt
POP_FILE=last_population*.txt

> $LOG_FILE
# echo Backing up saved population...
# yes | cp -rf $POP_FILE $POP_FILE.bak

while [ "$1" != "" ]; do
    if [ "$1" == "-d" ] || [ "$1" == "-D" ]; then
        echo Deleting last population...
        rm $POP_FILE
    elif [ "$1" == "-r" ] || [ "$1" == "-R" ]; then
        echo Ending previous program process...
        killall trilearn_player &> /dev/null
        killall trilearn_coach &> /dev/null
        # echo Restarting server...
        # pgrep rcssserver | xargs kill -9 &> /dev/null
        # rcssserver &> /dev/null &
    elif [ "$1" == "-n" ] || [ "$1" == "-N" ]; then
        echo Reconfiguring parameters based on actual version...
        echo "" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "################# autoreconf ################" >> $LOG_FILE
        echo "" >> $LOG_FILE
        autoreconf --force --install >> $LOG_FILE
        autoreconf -i >> $LOG_FILE

        echo Setting macros for scripts...
        echo "" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "################## aclocal ##################" >> $LOG_FILE
        echo "" >> $LOG_FILE
        set -e
        aclocal >> $LOG_FILE

        echo Generating configuration script...
        echo "" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "################## autoconf #################" >> $LOG_FILE
        echo "" >> $LOG_FILE
        autoconf >> $LOG_FILE

        echo Generating make script...
        echo "" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "################## automake #################" >> $LOG_FILE
        echo "" >> $LOG_FILE
        automake --add-missing >> $LOG_FILE

        echo Configuring project based on computer...
        echo "" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "################# configure #################" >> $LOG_FILE
        echo "" >> $LOG_FILE
        ./configure >> $LOG_FILE

        echo Cleaning last make...
        echo "" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "################# configure #################" >> $LOG_FILE
        echo "" >> $LOG_FILE
        make clean 2>&1 | tee -a $LOG_FILE
    fi
    shift
done;

echo Making binaries...
echo "" >> $LOG_FILE
echo "" >> $LOG_FILE
echo "" >> $LOG_FILE
echo "################### make ###################" >> $LOG_FILE
echo "" >> $LOG_FILE
set -e -o pipefail
colormake 2>&1 | tee -a $LOG_FILE

echo Done.
# while true; do
#     read -p "Do you wish to start the program? [Y/n] " answer
#     case ${answer:0:1} in
#         y|Y|"")
            ./start.sh 9 #2
            ./start-2.sh 9 #2
            # "/Users/fernando/Google Drive/Sincronização/Fê/Inteligência Artificial em Robótica (ESZA022)/Projetos/RocoCup/trilearnBaseUFABC/start-2.sh" 9
            # cd "/Users/fernando/Google Drive/Sincronização/Fê/Inteligência Artificial em Robótica (ESZA022)/Projetos/RocoCup/Git/RoboCup/helios/src/"
            # ./start.sh
            # cd -
#             break
#         ;;
#         n|N) break;;
#     esac
# done
